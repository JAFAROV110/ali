// index.js ‚Äî TikTok —á–∞—Ç -> TTS –Ω–∞ –ê–ª–∏—Å—É –õ–∞–π—Ç —á–µ—Ä–µ–∑ Bluetooth
// –£—Å—Ç–∞–Ω–æ–≤–∫–∞: npm i tiktok-live-connector say p-queue dotenv

require('dotenv').config();

const { TikTokLiveConnection, SignConfig } = require('tiktok-live-connector');
const say = require('say');
const PQueue = require('p-queue').default;

// === –ö–õ–Æ–ß –ò –°–ò–ì–ù–ï–† ===
const API_KEY = (process.env.EULER_API_KEY || '').trim();
const hasKey = !!API_KEY;

// –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–≤–æ–π –±–∞–∑–æ–≤—ã–π URL —Å–∏–≥–Ω–µ—Ä–∞ —á–µ—Ä–µ–∑ .env (SIGN_BASE_URL)
// –ò–ù–ê–ß–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—É–±–ª–∏—á–Ω—ã–π URL –æ—Ç Euler:
const DEFAULT_SIGN_BASE = 'https://tiktok.eulerstream.com';
const SIGN_BASE_URL = (process.env.SIGN_BASE_URL || DEFAULT_SIGN_BASE).trim();

console.log('üîê Signer key present:', hasKey ? 'YES' : 'NO');
console.log('üåê Sign server base:', SIGN_BASE_URL);

// –í–ê–ñ–ù–û: –∫–ª—é—á –∏ –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –Ω—É–∂–Ω–æ –≤—ã—Å—Ç–∞–≤–ª—è—Ç—å –î–û —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
if (hasKey) {
  SignConfig.apiKey = API_KEY;                   // –æ—Ñ. —Å–ø–æ—Å–æ–± –∑–∞–¥–∞—Ç—å –∫–ª—é—á
}
SignConfig.basePath = SIGN_BASE_URL;             // –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–∑–æ–≤—ã–π URL —Å–∏–≥–Ω–µ—Ä–∞
// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ –Ω–∞–∫–∏–Ω—É—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏:
// SignConfig.baseOptions.headers['X-Custom-Header'] = 'value';

// ====== –ù–ê–°–¢–†–û–ô–ö–ò ======
const USERNAME   = process.env.TIKTOK_USERNAME;          // –Ω–∏–∫ –±–µ–∑ @
const VOICE      = process.env.VOICE_RU || undefined;    // –Ω–∞–ø—Ä. 'Microsoft Irina Desktop'
const RATE       = Number(process.env.RATE || 1.0);      // —Å–∫–æ—Ä–æ—Å—Ç—å TTS (0.7‚Äì1.3)
const READ_CHAT  = (process.env.READ_CHAT ?? 'true').toLowerCase() === 'true';
const READ_GIFTS = (process.env.READ_GIFTS ?? 'true').toLowerCase() === 'true';
const MIN_LEN    = Number(process.env.MIN_LEN || 1);     // –º–∏–Ω. –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
const MAX_LEN    = Number(process.env.MAX_LEN || 180);   // –º–∞–∫—Å. –¥–ª–∏–Ω–∞ –æ–∑–≤—É—á–∫–∏

if (!USERNAME) {
  console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ TIKTOK_USERNAME –≤ .env (–Ω–∏–∫ –±–µ–∑ @).');
  process.exit(1);
}

// ====== HELPERS ======
const queue = new PQueue({ concurrency: 1 });
const sleep = (ms) => new Promise(r => setTimeout(r, ms));

function sanitize(text) {
  if (!text) return '';
  let t = String(text).replace(/\s+/g, ' ').trim();
  t = t.replace(/https?:\/\/\S+/gi, ' —Å—Å—ã–ª–∫–∞ ');
  if (t.length > MAX_LEN) t = t.slice(0, MAX_LEN - 1) + '‚Ä¶';
  return t;
}
function looksLikeSpam(text) {
  const banned = [/http/i, /t\.me/i, /vk\.com/i, /discord\.gg/i, /join/i, /–≤–∑–∞–∏–º/i];
  return banned.some(rx => rx.test(text));
}
function speak(text) {
  return new Promise(resolve => {
    say.speak(text, VOICE, RATE, err => {
      if (err) console.error('–û—à–∏–±–∫–∞ TTS:', err);
      resolve();
    });
  });
}

// ====== –ö–õ–ò–ï–ù–¢ TIKTOK (–ø–µ—Ä–µ–¥–∞—ë–º –∫–ª—é—á –∏ —Ç—É—Ç ‚Äî –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏) ======
const tiktok = new TikTokLiveConnection(USERNAME, {
  requestOptions: { timeout: 10000 },
  signApiKey: hasKey ? API_KEY : undefined, // –¥—É–±–ª–∏—Ä—É–µ–º –∫–ª—é—á –≤ –æ–ø—Ü–∏—è—Ö –∫–ª–∏–µ–Ω—Ç–∞
  // –ú–æ–∂–Ω–æ –∑–∞–ø—Ä–µ—Ç–∏—Ç—å fallback-–∏, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π basePath:
  // disableEulerFallbacks: true,
});

// ====== –°–û–ë–´–¢–ò–Ø ======
tiktok.on('connected', (state) => {
  const nick = state?.roomInfo?.owner?.nickname || `@${USERNAME}`;
  console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —á–∞—Ç—É ${nick}`);
});

tiktok.on('disconnected', () => {
  console.log('‚ö†Ô∏è –û—Ç–∫–ª—é—á–µ–Ω–æ. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞—é—Å—å —á–µ—Ä–µ–∑ 3 —Å–µ–∫‚Ä¶');
  setTimeout(() => safeConnect(6).catch(() => {}), 3000);
});

tiktok.on('chat', (msg) => {
  if (!READ_CHAT) return;
  const user = msg?.uniqueId || '–ì–æ—Å—Ç—å';
  const text = sanitize(msg?.comment);
  if (!text || text.length < MIN_LEN) return;
  if (looksLikeSpam(text)) return;

  const phrase = `${user} –ø–∏—à–µ—Ç: ${text}`;
  queue.add(async () => {
    console.log('üí¨', phrase);
    await speak(phrase);
    await sleep(500);
  }).catch(console.error);
});

tiktok.on('gift', (ev) => {
  if (!READ_GIFTS) return;
  const user  = ev?.uniqueId || '–ó—Ä–∏—Ç–µ–ª—å';
  const gift  = ev?.giftName || '–ø–æ–¥–∞—Ä–æ–∫';
  const count = ev?.repeatCount || 1;
  const phrase = `${user} –æ—Ç–ø—Ä–∞–≤–∏–ª ${count} ${gift}`;
  queue.add(async () => {
    console.log('üéÅ', phrase);
    await speak(phrase);
    await sleep(400);
  }).catch(console.error);
});

// ====== –ù–ê–î–Å–ñ–ù–´–ô –ö–û–ù–ù–ï–ö–¢ –° –†–ï–¢–†–ê–Ø–ú–ò ======
async function safeConnect(maxAttempts = 8) {
  let attempt = 1, delay = 1200;
  while (attempt <= maxAttempts) {
    try {
      await tiktok.connect();
      return;
    } catch (e) {
      const reason = e?.reason || e?.message || String(e);
      const status = e?.status || e?.response?.status || '';
      console.error(`üîÅ –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å: ${reason}${status ? ` (status ${status})` : ''}`);
      if (attempt === maxAttempts) throw e;
      await sleep(delay);
      delay = Math.min(Math.floor(delay * 1.8), 15000);
      attempt++;
    }
  }
}

// ====== –°–¢–ê–†–¢ ======
safeConnect().catch(err => {
  console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è:', err?.reason || err?.message || err);
  process.exit(1);
});

process.stdin.setEncoding('utf8');
console.log('üß™ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ Enter ‚Äî –æ–∑–≤—É—á–∏–º –µ–≥–æ –Ω–∞ –ê–ª–∏—Å–µ –õ–∞–π—Ç.');
process.stdin.on('data', data => {
  const t = sanitize(data);
  if (!t || t.length < MIN_LEN) return;
  if (looksLikeSpam(t)) return;
  queue.add(async () => {
    console.log('üó£Ô∏è (–ª–æ–∫–∞–ª—å–Ω–æ)', t);
    await speak(t);
  }).catch(console.error);
});
